#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
from openai import OpenAI
from openai import OpenAIError
import argparse
from loguru import logger
from tqdm import tqdm

class LegalDocumentProcessor:
    def __init__(self, api_key: str, model: str = "gpt-4o-mini"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        self.client = OpenAI(api_key=api_key)
        self.model = model
        self.processed_count = 0
        self.max_documents = 3  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def create_analysis_prompt(self, text: str, filename: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É–¥–µ–±–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        """
        return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å—É–¥–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –í–µ—Ä—Ö–æ–≤–Ω–æ–º –°—É–¥–µ –†–§. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É–¥–µ–±–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

–¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê:
{text}

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ê–ù–ê–õ–ò–ó–£:

1. –û–ü–†–ï–î–ï–õ–ò –¢–ò–ü –î–û–ö–£–ú–ï–ù–¢–ê:
   - –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞
   - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–¥–∞  
   - –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–¥–∞
   - –ü—Ä–∏–≥–æ–≤–æ—Ä —Å—É–¥–∞
   - –î—Ä—É–≥–æ–µ (—É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ)

2. –ò–ó–í–õ–ï–ö–ò –û–°–ù–û–í–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ:
   - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞ (–ø–æ–ª–Ω–æ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
   - –ù–æ–º–µ—Ä –¥–µ–ª–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ)
   - –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)
   - –°—É–¥—å—è (–ø–æ–ª–Ω–æ–µ –§–ò–û)
   - –°—Ç–æ—Ä–æ–Ω—ã –¥–µ–ª–∞ (–∏—Å—Ç–µ—Ü/–∑–∞—è–≤–∏—Ç–µ–ª—å, –æ—Ç–≤–µ—Ç—á–∏–∫/–æ–±–≤–∏–Ω—è–µ–º—ã–π —Å –ø–æ–ª–Ω—ã–º–∏ –§–ò–û)

3. –†–ê–ó–î–ï–õ–ò –ù–ê –°–ï–ö–¶–ò–ò (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):
   - –£–°–¢–ê–ù–û–í–û–ß–ù–ê–Ø –ß–ê–°–¢–¨: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
   - –ú–û–¢–ò–í–ò–†–û–í–û–ß–ù–ê–Ø –ß–ê–°–¢–¨: –ø—Ä–∞–≤–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã
   - –†–ï–ó–û–õ–Æ–¢–ò–í–ù–ê–Ø –ß–ê–°–¢–¨: –≤—ã–≤–æ–¥—ã –∏ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–∞

4. –û–ü–†–ï–î–ï–õ–ò –ü–†–ï–î–ú–ï–¢ –°–ü–û–†–ê:
   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ —Å–ø–æ—Ä–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ)
   - –ü—Ä–µ–¥–º–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞ (–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ, —É–≥–æ–ª–æ–≤–Ω–æ–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ, –Ω–∞–ª–æ–≥–æ–≤–æ–µ, —Ç—Ä—É–¥–æ–≤–æ–µ, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–µ)

5. –í–´–î–ï–õ–ò –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´:
   - –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞ (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏)
   - –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è
   - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   - –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç–æ—Ä–æ–Ω

6. –ò–ó–í–õ–ï–ö–ò –ü–†–ê–í–û–í–´–ï –ù–û–†–ú–´:
   - –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ (—Å –Ω–æ–º–µ—Ä–∞–º–∏)
   - –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
   - –ü—Ä–∞–≤–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
   - –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)

7. –û–ü–†–ï–î–ï–õ–ò –†–ï–ó–£–õ–¨–¢–ê–¢:
   - –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ)
   - –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
   - –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)

8. –ö–ê–ß–ï–°–¢–í–û –ê–ù–ê–õ–ò–ó–ê:
   - –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   - –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ
   - –û—Å–æ–±—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

–í–ï–†–ù–ò –û–¢–í–ï–¢ –°–¢–†–û–ì–û –í –°–õ–ï–î–£–Æ–©–ï–ú JSON –§–û–†–ú–ê–¢–ï (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):

{{
    "document_info": {{
        "filename": "{filename}",
        "document_type": "—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        "court_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞",
        "case_number": "–Ω–æ–º–µ—Ä –¥–µ–ª–∞",
        "date": "–¥–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è",
        "judge": "–§–ò–û —Å—É–¥—å–∏",
        "parties": {{
            "plaintiff": "–∏—Å—Ç–µ—Ü/–∑–∞—è–≤–∏—Ç–µ–ª—å",
            "defendant": "–æ—Ç–≤–µ—Ç—á–∏–∫/–æ–±–≤–∏–Ω—è–µ–º—ã–π"
        }}
    }},
    "subject_matter": {{
        "dispute_description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞",
        "main_claims": "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
        "legal_area": "–ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞"
    }},
    "sections": {{
        "facts": "—É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è —á–∞—Å—Ç—å - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞",
        "reasoning": "–º–æ—Ç–∏–≤–∏—Ä–æ–≤–æ—á–Ω–∞—è —á–∞—Å—Ç—å - –ø—Ä–∞–≤–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", 
        "conclusion": "—Ä–µ–∑–æ–ª—é—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å - –≤—ã–≤–æ–¥—ã –∏ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–∞"
    }},
    "key_facts": [
        "—Ñ–∞–∫—Ç 1",
        "—Ñ–∞–∫—Ç 2",
        "—Ñ–∞–∫—Ç 3"
    ],
    "legal_norms": [
        "—Å—Ç–∞—Ç—å—è 1 –∑–∞–∫–æ–Ω–∞",
        "—Å—Ç–∞—Ç—å—è 2 –∫–æ–¥–µ–∫—Å–∞"
    ],
    "court_decision": {{
        "main_decision": "–æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞",
        "appeal_info": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–∏",
        "enforcement": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏"
    }},
    "analysis_quality": {{
        "completeness": "–ø–æ–ª–Ω–æ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)",
        "confidence": "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)",
        "notes": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è"
    }}
}}

–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–∫–∞–∂–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
- –°–æ—Ö—Ä–∞–Ω—è–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
- –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
"""

    def analyze_document(self, text: str, filename: str) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI API
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}")
            logger.info(f"   üìÑ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            logger.info(f"   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...")
            prompt = self.create_analysis_prompt(text, filename)
            logger.info(f"   üìù –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            logger.info(f"   ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI (–º–æ–¥–µ–ª—å: {self.model})...")
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å—É–¥–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                max_tokens=4000   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
            )
            
            elapsed_time = time.time() - start_time
            logger.info(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            content = response.choices[0].message.content
            logger.info(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º JSON
            logger.info(f"   üîß –ü–∞—Ä—Å–∏–Ω–≥ JSON...")
            try:
                result = json.loads(content)
                logger.info(f"   ‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                return result
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è {filename}: {e}")
                logger.error(f"   üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {content[:500]}...")
                return None
                
        except OpenAIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API –¥–ª—è {filename}: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {filename}: {e}")
            return None

    def save_result(self, result: Dict[str, Any], output_dir: str, filename: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_filename = f"{Path(filename).stem}_analyzed.json"
            output_path = Path(output_dir) / output_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
                
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {filename}: {e}")

    def process_text_file(self, input_file: str, output_dir: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if self.processed_count >= self.max_documents:
                logger.info(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({self.max_documents}). –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {Path(input_file).name}")
            with open(input_file, 'r', encoding='utf-8') as f:
                text = f.read()
            
            if not text.strip():
                logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª {input_file} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            logger.info(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            filename = Path(input_file).name
            result = self.analyze_document(text, filename)
            
            if result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.save_result(result, output_dir, filename)
                self.processed_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º...")
                time.sleep(1)
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {input_file}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_file}: {e}")
            return False

    def process_directory(self, input_dir: str, output_dir: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            input_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {input_dir}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            text_files = list(Path(input_dir).glob("*.txt"))
            
            if not text_files:
                logger.warning(f"‚ö†Ô∏è  –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return
            
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(text_files)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
            logger.info(f"üéØ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º {self.max_documents} —Ñ–∞–π–ª–æ–≤")
            logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{min(len(text_files), self.max_documents)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            processed = 0
            with tqdm(total=min(len(text_files), self.max_documents), 
                     desc="üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                     unit="–¥–æ–∫") as pbar:
                
                for i, text_file in enumerate(text_files):
                    logger.info(f"\n{'='*60}")
                    logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç {i+1}/{min(len(text_files), self.max_documents)}: {text_file.name}")
                    logger.info(f"{'='*60}")
                    
                    if self.process_text_file(str(text_file), output_dir):
                        processed += 1
                        pbar.update(1)
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{min(len(text_files), self.max_documents)}")
                    else:
                        logger.warning(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {text_file.name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if self.processed_count >= self.max_documents:
                        logger.info(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        break
            
            logger.info(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} —Ñ–∞–π–ª–æ–≤")
            logger.info(f"   üìÅ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(text_files)} —Ñ–∞–π–ª–æ–≤")
            logger.info(f"   üéØ –õ–∏–º–∏—Ç: {self.max_documents} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir}: {e}")

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI API')
    parser.add_argument('--input-dir', type=str, required=True, help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--output-dir', type=str, required=True, help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--api-key', type=str, help='OpenAI API –∫–ª—é—á (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY)')
    parser.add_argument('--model', type=str, default='gpt-4o-mini', help='–ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--max-docs', type=int, default=3, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--max-workers', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)')
    
    args = parser.parse_args()
    
    logger.info("="*80)
    logger.info("ü§ñ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–£–î–ï–ë–ù–´–• –î–û–ö–£–ú–ï–ù–¢–û–í –° OPENAI")
    logger.info("="*80)
    logger.info(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.input_dir}")
    logger.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.output_dir}")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å OpenAI: {args.model}")
    logger.info(f"üéØ –ú–∞–∫—Å–∏–º—É–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {args.max_docs}")
    logger.info("="*80)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    logger.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞...")
    api_key = args.api_key or os.getenv("OPENAI_API_KEY")
    if not api_key:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω OpenAI API –∫–ª—é—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --api-key –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        return
    
    logger.info("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    processor = LegalDocumentProcessor(api_key, args.model)
    processor.max_documents = args.max_docs
    logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    start_time = time.time()
    
    processor.process_directory(args.input_dir, args.output_dir)
    
    total_time = time.time() - start_time
    logger.info("="*80)
    logger.info(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {total_time/max(1, processor.processed_count):.2f} —Å–µ–∫—É–Ω–¥")
    logger.info("="*80)

if __name__ == "__main__":
    main() 