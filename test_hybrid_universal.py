#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from inference import load_model, generate
from hybrid_processor import create_hybrid_processor
from loguru import logger

def test_hybrid_universal():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_facts = """
    –ò—Å—Ç–µ—Ü –ò–≤–∞–Ω–æ–≤ –ò.–ò. –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ —Å—É–¥ —Å –∏—Å–∫–æ–º –∫ –æ—Ç–≤–µ—Ç—á–∏–∫—É –ü–µ—Ç—Ä–æ–≤—É –ü.–ü. –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞–π–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 100 000 —Ä—É–±–ª–µ–π. 
    –î–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞ –±—ã–ª –∑–∞–∫–ª—é—á–µ–Ω 15 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞, —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ - 15 –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞. 
    –û—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∏–ª, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏—Å—Ç—Ü–∞.
    """
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê")
    print("=" * 60)
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n{test_facts}")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ QVikhr...")
        model_path = os.path.join("models", "legal_model")
        if not os.path.exists(model_path):
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            return
        
        model, tokenizer = load_model(model_path)
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å QVikhr –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
        print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é QVikhr...")
        local_response = generate(
            model=model,
            tokenizer=tokenizer,
            facts=test_facts,
            max_input_length=1024,
            max_output_length=1024
        )
        
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å QVikhr —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç")
        print(f"\nüìÑ –õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (QVikhr):\n{local_response}")
        print("=" * 60)
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers = ["gemini", "openai"]
        
        for provider in providers:
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider.upper()}")
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                hybrid_processor = create_hybrid_processor(provider=provider)
                print(f"‚úÖ {provider.upper()} –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
                modes = ["polish", "enhance", "verify"]
                
                for mode in modes:
                    print(f"  üîÑ –†–µ–∂–∏–º: {mode}")
                    try:
                        hybrid_response = hybrid_processor.process_with_external_llm(
                            local_response=local_response,
                            original_query=test_facts,
                            mode=mode
                        )
                        
                        print(f"  ‚úÖ –†–µ–∂–∏–º '{mode}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {provider.upper()}")
                        print(f"  üìÑ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ñ–ò–ú–ê '{mode.upper()}' ({provider.upper()}):\n{hybrid_response[:200]}...")
                        print("  " + "-" * 50)
                        
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ '{mode}': {e}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {provider.upper()} –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
                print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π {provider.upper()}_API_KEY")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def test_provider_connection(provider: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
    print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö {provider.upper()} API")
    print("=" * 50)
    
    try:
        hybrid_processor = create_hybrid_processor(provider=provider)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_response = hybrid_processor.process_with_external_llm(
            local_response="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ QVikhr.",
            original_query="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            mode="polish"
        )
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {provider.upper()} API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider.upper()}:\n{test_response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {provider.upper()} API: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ")
        print("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        print("   ‚Ä¢ VPN (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        if provider == "gemini":
            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É google-genai: pip install google-genai")
        elif provider == "openai":
            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É openai: pip install openai")

def test_simple_connection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    providers = ["gemini", "openai"]
    
    for provider in providers:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider.upper()}...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            processor = create_hybrid_processor(provider=provider)
            print(f"‚úÖ {provider.upper()} –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_local_response = """
            –°—É–¥ —Å—á–∏—Ç–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏—Å—Ç—Ü–∞ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏. 
            –ú–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –±—ã–ª –∑–∞–∫–ª—é—á–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞. 
            –û—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∏–ª –∑–∞–µ–º –≤ —Å—Ä–æ–∫.
            """
            
            test_query = "–ò—Å—Ç–µ—Ü —Ç—Ä–µ–±—É–µ—Ç –≤–∑—ã—Å–∫–∞—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞–π–º–∞"
            
            print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
            print(f"üìÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {test_local_response.strip()}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º polish
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ 'polish' —á–µ—Ä–µ–∑ {provider.upper()}...")
            result = processor.process_with_external_llm(
                local_response=test_local_response,
                original_query=test_query,
                mode="polish"
            )
            
            print(f"‚úÖ –†–µ–∂–∏–º 'polish' —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ {provider.upper()}!")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤ .env —Ñ–∞–π–ª–µ")

def test_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π"""
    print("\nüîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô")
    print("=" * 30)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = os.path.join(".env")
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
    
    gemini_key = os.getenv('GEMINI_API_KEY')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    print(f"GEMINI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if gemini_key and gemini_key != 'your_gemini_api_key_here' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if openai_key and openai_key != 'your_openai_api_key_here' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not gemini_key or gemini_key == 'your_gemini_api_key_here':
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
    
    if not openai_key or openai_key == 'your_openai_api_key_here':
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    test_api_keys()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_simple_connection()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    test_provider_connection("gemini")
    test_provider_connection("openai")
    
    # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    test_hybrid_universal()
    
    print("\n" + "=" * 70)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
