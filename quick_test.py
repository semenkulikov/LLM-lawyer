#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
from pathlib import Path
from loguru import logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = Path('.env')
    if env_file.exists():
        logger.info("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞...")
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        logger.success("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        logger.warning("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_env()

def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'torch', 'transformers', 'datasets', 'openai', 
        'pymupdf', 'nltk', 'tqdm', 'numpy', 'loguru'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            logger.success(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            logger.error(f"‚ùå {package}")
    
    if missing_packages:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    
    logger.success("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def test_openai_key():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API –∫–ª—é—á–∞"""
    logger.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    try:
        result = subprocess.run([
            sys.executable, "check_env.py"
        ], capture_output=True, text=True, encoding='utf-8', errors='replace', check=True)
        
        logger.success("‚úÖ .env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å .env —Ñ–∞–π–ª–æ–º: {e.stderr}")
        logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ check_env.bat –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        return False
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º API
    try:
        result = subprocess.run([
            sys.executable, "src/test_openai_key.py"
        ], capture_output=True, text=True, encoding='utf-8', errors='replace', check=True)
        
        logger.success("‚úÖ OpenAI API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e.stderr}")
        return False

def test_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = [
        'src', 'data', 'data/raw', 'data/processed', 
        'data/analyzed', 'models', 'gui'
    ]
    
    missing_dirs = []
    for directory in required_dirs:
        if Path(directory).exists():
            logger.success(f"‚úÖ {directory}")
        else:
            missing_dirs.append(directory)
            logger.warning(f"‚ö†Ô∏è  {directory} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for directory in missing_dirs:
        Path(directory).mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    return True

def test_scripts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    logger.info("üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    required_scripts = [
        'src/preprocess.py',
        'src/process_with_openai.py', 
        'src/build_dataset.py',
        'src/train.py',
        'src/inference.py',
        'src/test_example.py',
        'src/monitor_training.py',
        'gui/app.py',
        'run_pipeline.py'
    ]
    
    missing_scripts = []
    for script in required_scripts:
        if Path(script).exists():
            logger.success(f"‚úÖ {script}")
        else:
            missing_scripts.append(script)
            logger.error(f"‚ùå {script}")
    
    if missing_scripts:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(missing_scripts)}")
        return False
    
    logger.success("‚úÖ –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def test_sample_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    raw_files = list(Path('data/raw').glob('*.pdf'))
    processed_files = list(Path('data/processed').glob('*.txt'))
    analyzed_files = list(Path('data/analyzed').glob('*_analyzed.json'))
    
    logger.info(f"üìä PDF —Ñ–∞–π–ª–æ–≤ –≤ data/raw: {len(raw_files)}")
    logger.info(f"üìä TXT —Ñ–∞–π–ª–æ–≤ –≤ data/processed: {len(processed_files)}")
    logger.info(f"üìä JSON —Ñ–∞–π–ª–æ–≤ –≤ data/analyzed: {len(analyzed_files)}")
    
    if not raw_files:
        logger.warning("‚ö†Ô∏è  –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ data/raw/")
        logger.info("–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫—É data/raw/ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("=" * 50)
    
    tests = [
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", test_directory_structure),
        ("–°–∫—Ä–∏–ø—Ç—ã", test_scripts),
        ("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", test_sample_data),
        ("OpenAI API", test_openai_key)
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 50)
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        if result:
            logger.success(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            passed += 1
        else:
            logger.error(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        logger.info("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ data/raw/")
        logger.info("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_pipeline.py")
        logger.info("3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ GUI: python gui/app.py")
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        logger.info("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI API –∫–ª—é—á: python src/test_openai_key.py")
        logger.info("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ")

if __name__ == '__main__':
    main()