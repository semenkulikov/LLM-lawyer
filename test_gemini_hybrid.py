#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from inference import load_model, generate
from gemini_hybrid_processor import create_gemini_hybrid_processor
from loguru import logger

def test_gemini_hybrid_approach():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å Gemini Ultra"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_facts = """
    –ò—Å—Ç–µ—Ü –ò–≤–∞–Ω–æ–≤ –ò.–ò. –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ —Å—É–¥ —Å –∏—Å–∫–æ–º –∫ –æ—Ç–≤–µ—Ç—á–∏–∫—É –ü–µ—Ç—Ä–æ–≤—É –ü.–ü. –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞–π–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 100 000 —Ä—É–±–ª–µ–π. 
    –î–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞ –±—ã–ª –∑–∞–∫–ª—é—á–µ–Ω 15 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞, —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ - 15 –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞. 
    –û—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∏–ª, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏—Å—Ç—Ü–∞.
    """
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê –° GEMINI ULTRA")
    print("=" * 60)
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n{test_facts}")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ QVikhr...")
        model_path = os.path.join("models", "legal_model")
        if not os.path.exists(model_path):
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            return
        
        model, tokenizer = load_model(model_path)
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å QVikhr –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
        print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é QVikhr...")
        local_response = generate(
            model=model,
            tokenizer=tokenizer,
            facts=test_facts,
            max_input_length=1024,
            max_output_length=1024
        )
        
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å QVikhr —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç")
        print(f"\nüìÑ –õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (QVikhr):\n{local_response}")
        print("=" * 60)
        
        # –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        try:
            gemini_processor = create_gemini_hybrid_processor()
            print("‚úÖ Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π GEMINI_API_KEY")
            return
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        modes = ["polish", "enhance", "verify"]
        
        for mode in modes:
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {mode}")
            try:
                gemini_response = gemini_processor.process_with_gemini(
                    local_response=local_response,
                    original_query=test_facts,
                    mode=mode
                )
                
                print(f"‚úÖ –†–µ–∂–∏–º '{mode}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Gemini Ultra")
                print(f"\nüìÑ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ñ–ò–ú–ê '{mode.upper()}' (Gemini Ultra):\n{gemini_response}")
                print("-" * 60)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ '{mode}': {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å Gemini Ultra –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def test_gemini_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GEMINI API")
    print("=" * 50)
    
    try:
        gemini_processor = create_gemini_hybrid_processor()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_response = gemini_processor.process_with_gemini(
            local_response="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ QVikhr.",
            original_query="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            mode="polish"
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini Ultra:\n{test_response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ")
        print("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        print("   ‚Ä¢ VPN (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É google-genai: pip install google-genai")

def test_gemini_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Gemini –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ GEMINI ULTRA")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        from gemini_hybrid_processor import create_gemini_hybrid_processor
        
        print("‚úÖ –ú–æ–¥—É–ª—å gemini_hybrid_processor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = create_gemini_hybrid_processor()
        print("‚úÖ Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_local_response = """
        –°—É–¥ —Å—á–∏—Ç–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏—Å—Ç—Ü–∞ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏. 
        –ú–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –±—ã–ª –∑–∞–∫–ª—é—á–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞. 
        –û—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∏–ª –∑–∞–µ–º –≤ —Å—Ä–æ–∫.
        """
        
        test_query = "–ò—Å—Ç–µ—Ü —Ç—Ä–µ–±—É–µ—Ç –≤–∑—ã—Å–∫–∞—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞–π–º–∞"
        
        print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
        print(f"üìÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {test_local_response.strip()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º polish
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ 'polish' —á–µ—Ä–µ–∑ Gemini Ultra...")
        result = processor.process_with_gemini(
            local_response=test_local_response,
            original_query=test_query,
            mode="polish"
        )
        
        print("‚úÖ –†–µ–∂–∏–º 'polish' —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Gemini Ultra!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
        
        print("\nüéâ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å Gemini Ultra –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê –° GEMINI ULTRA")
    print("=" * 70)
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Gemini
    test_gemini_simple()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini
    test_gemini_connection()
    
    # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    test_gemini_hybrid_approach()
    
    print("\n" + "=" * 70)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
